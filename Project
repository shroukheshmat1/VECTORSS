#include <bits/stdc++.h>
using namespace std;

template<typename T>class SRvector{
private:
    T*vec;
    int SZ;
public:
    SRvector(){
        SZ =0;
    };
    SRvector(int x){
        vec=new T[x];
        SZ =x;
        for(int i=0;i<SZ;i++){
            *(vec+i)=0;
        }
    };
    friend ostream& operator << (ostream& out, SRvector<T>);
SRvector(T*,int n)
    {
        T*arr=new T[n];
        cout<<"please enter your elements: "<<endl;
        for(int i=0;i<n;i++)
        {
            cin>>arr[i];
        }
        vec=new T[n];
        SZ=n;
        for(int i=0;i<SZ;i++){
            *(vec+i)=*(arr+i);
        }
        for(int i=0;i<SZ;i++)
        {
           cout<<vec[i]<<" ";
        }
        cout<<endl;
    }
    SRvector(const SRvector&obj)
    {
        SZ=obj.SZ;
        vec=new T[SZ];
        for(int i=0;i<SZ;i++){
            *(vec+i)=*(obj+i);
        }
        for(int i=0;i<SZ;i++)
        {
            cout<<vec[i]<<" ";
        }
        cout<<endl;
    };
    ~SRvector()
    {
        cout<<"end"<<endl;
        delete[] vec;
        vec= nullptr;
    };
    void insert(int iterator, T obj)
    {
        SZ=SZ+1;
        vec=new T[SZ];
        for (int i=iterator+1;i<SZ;i++)
            vec[i]=vec[iterator-1];
        vec[iterator]=obj;
    };
    // Comparison operations
    bool operator==(const SRvector<T>&my_obj)
    {
        if (SZ!=my_obj.SZ)
            return false;
        else
        {
            for (int i=0;i<SZ;i++)
            {
                if (my_obj[i]==vec[i])
                {
                    if (i!=SZ-1)
                        continue;
                    else
                        return true;
                }
                else
                    return false;
            }
        }
    };
    bool operator< (const SRvector<T>&my_obj)
    {
        for (int i=0;i<SZ;i++)
        {
            if (my_obj[i]==vec[i])
            {
                if (i!=SZ-1)
                    continue;
                else
                    return false;
            }
            else
            {
                if (my_obj[i]<vec[i])
                    return true;
            }
        }
    }
};

template<typename T> ostream& operator << (ostream& out, SRvector<T>vecc)
{
    for (int i=0;i<vecc.SZ();i++)
        out<<vecc[i]<<" ";
    cout<<endl;
    return out;
};
